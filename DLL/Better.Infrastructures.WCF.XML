<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Better.Infrastructures.WCF</name>
    </assembly>
    <members>
        <member name="T:Better.Infrastructures.Wcf.ServiceProxyFactory">
            <summary>
            服务代理工厂,为了兼容老Wcf命名空间
            </summary>
        </member>
        <member name="M:Better.Infrastructures.Wcf.ServiceProxyFactory.Create``1(System.String,System.String)">
            <summary>
            创建服务代理
            </summary>
            <typeparam name="T">契约接口类型</typeparam>
            <param name="configurationPath">配置文件路径</param>
            <param name="endpointName">终结点名称</param>
            <returns>服务代理</returns>
        </member>
        <member name="M:Better.Infrastructures.Wcf.ServiceProxyFactory.GetEndpointAddress``1(System.String,System.String)">
            <summary>
            获取代理终结点地址
            </summary>
            <typeparam name="T">契约接口类型</typeparam>
            <param name="configurationPath">配置文件路径</param>
            <param name="endpointName">终结点名称</param>
            <returns>终结点地址</returns>
        </member>
        <member name="T:Better.Infrastructures.WCF.DuplexServiceRealProxy`2">
            <summary>
            双工服务真实代理
            </summary>
            <typeparam name="T">真实代理类型</typeparam>
            <typeparam name="TCallBack">回调</typeparam>
        </member>
        <member name="F:Better.Infrastructures.WCF.DuplexServiceRealProxy`2.configurationPath">
            <summary>
            配置路径
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.DuplexServiceRealProxy`2.endpointName">
            <summary>
            终结点名称
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.DuplexServiceRealProxy`2.callBack">
            <summary>
            回调
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.DuplexServiceRealProxy`2.#ctor(System.String,System.String,`1)">
            <summary>
            构造函数
            </summary>
            <param name="configurationPath">配置路径</param>
            <param name="endpointName">终结点名称</param>
            <param name="callBack">回调</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.DuplexServiceRealProxy`2.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Invoke方法
            </summary>
            <param name="msg">消息通讯数据</param>
            <returns>消息数据</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.DuplexServiceRealProxy`2.GetOperationName(System.Reflection.MethodBase)">
            <summary>
            获取操作名称
            </summary>
            <param name="method">操作</param>
            <returns>操作名称</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.DuplexServiceRealProxy`2.GetParameters(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            获取参数字典
            </summary>
            <param name="mcm">调用消息接口</param>
            <returns>参数字典</returns>
        </member>
        <member name="T:Better.Infrastructures.Wcf.UnityInterceptionBehaviorAttribute">
            <summary>
            UnityInterception特性类
            </summary>
        </member>
        <member name="M:Better.Infrastructures.Wcf.UnityInterceptionBehaviorAttribute.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            增加绑定参数
            </summary>
            <param name="contractDescription">契约描述</param>
            <param name="endpoint">服务终结点</param>
            <param name="bindingParameters">绑定参数集合</param>
        </member>
        <member name="M:Better.Infrastructures.Wcf.UnityInterceptionBehaviorAttribute.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            客户端行为扩展
            </summary>
            <param name="contractDescription">契约描述</param>
            <param name="endpoint">服务终结点</param>
            <param name="clientRuntime">客户端运行时</param>
        </member>
        <member name="M:Better.Infrastructures.Wcf.UnityInterceptionBehaviorAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
            <summary>
            服务端行为扩展
            </summary>
            <param name="contractDescription">契约描述</param>
            <param name="endpoint">服务终结点</param>
            <param name="dispatchRuntime">调度运行时</param>
        </member>
        <member name="M:Better.Infrastructures.Wcf.UnityInterceptionBehaviorAttribute.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            检查
            </summary>
            <param name="contractDescription">契约描述</param>
            <param name="endpoint">服务终结点</param>
        </member>
        <member name="P:Better.Infrastructures.Wcf.UnityInterceptionBehaviorAttribute.PolicyInjectorName">
            <summary>
            注入器名称
            </summary>
        </member>
        <member name="T:Better.Infrastructures.Wcf.ServiceLogCallHandlerAttribute">
            <summary>
            服务日志处理特性，,为了兼容老Wcf命名空间
            </summary>
        </member>
        <member name="M:Better.Infrastructures.Wcf.ServiceLogCallHandlerAttribute.CreateHandler(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            创建处理器
            </summary>
            <param name="container">依赖注入容器</param>
            <returns>处理器</returns>
        </member>
        <member name="P:Better.Infrastructures.Wcf.ServiceLogCallHandlerAttribute.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:Better.Infrastructures.WCF.UnityContainerSingleton">
            <summary>
            UnityContainerSingleton类 
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.UnityContainerSingleton.container">
            <summary>
            容器实例字段
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.UnityContainerSingleton.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Better.Infrastructures.WCF.UnityContainerSingleton.Instance">
            <summary>
            单例实例
            </summary>
        </member>
        <member name="P:Better.Infrastructures.WCF.UnityContainerSingleton.Container">
            <summary>
            Get the Instance of the Unity container.
            </summary>
        </member>
        <member name="T:Better.Infrastructures.WCF.UnityContainerSingleton.Nested">
            <summary>
            内部嵌套类
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.UnityContainerSingleton.Nested.Instance">
            <summary>
            嵌套实例
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.UnityContainerSingleton.Nested.#cctor">
            <summary>
            内部嵌套类构造函数
            </summary>
        </member>
        <member name="T:Better.Infrastructures.WCF.UnityInterceptionBehaviorAttribute">
            <summary>
            UnityInterception特性类
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.UnityInterceptionBehaviorAttribute.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            增加绑定参数
            </summary>
            <param name="contractDescription">契约描述</param>
            <param name="endpoint">服务终结点</param>
            <param name="bindingParameters">绑定参数集合</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.UnityInterceptionBehaviorAttribute.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            客户端行为扩展
            </summary>
            <param name="contractDescription">契约描述</param>
            <param name="endpoint">服务终结点</param>
            <param name="clientRuntime">客户端运行时</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.UnityInterceptionBehaviorAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
            <summary>
            服务端行为扩展
            </summary>
            <param name="contractDescription">契约描述</param>
            <param name="endpoint">服务终结点</param>
            <param name="dispatchRuntime">调度运行时</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.UnityInterceptionBehaviorAttribute.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            检查
            </summary>
            <param name="contractDescription">契约描述</param>
            <param name="endpoint">服务终结点</param>
        </member>
        <member name="P:Better.Infrastructures.WCF.UnityInterceptionBehaviorAttribute.PolicyInjectorName">
            <summary>
            注入器名称
            </summary>
        </member>
        <member name="T:Better.Infrastructures.WCF.UnityInstanceProvider">
            <summary>
            AOP拦截
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.UnityInstanceProvider.container">
            <summary>
            依赖注入容器
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.UnityInstanceProvider.serviceContractType">
            <summary>
            服务契约类型
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.UnityInstanceProvider.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="serviceContractType">服务契约类型</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.UnityInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
            <summary>
            获取实例
            </summary>
            <param name="instanceContext">实例上下文</param>
            <param name="message">消息</param>
            <returns>实例</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.UnityInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
            <summary>
            获取实例
            </summary>
            <param name="instanceContext">实例上下文</param>
            <returns>实例</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.UnityInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
            <summary>
            释放实例 n
            </summary>
            <param name="instanceContext">实例上下文</param>
            <param name="instance">实例</param>
        </member>
        <member name="P:Better.Infrastructures.WCF.UnityInstanceProvider.Container">
            <summary>
            依赖注入容器
            </summary>
        </member>
        <member name="T:Better.Infrastructures.WCF.ServiceRealProxy`1">
            <summary>
            服务真实代理
            </summary>
            <typeparam name="T">契约接口</typeparam>
        </member>
        <member name="F:Better.Infrastructures.WCF.ServiceRealProxy`1.configurationPath">
            <summary>
            配置文件路径
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.ServiceRealProxy`1.endpointName">
            <summary>
            终结点名称
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.ServiceRealProxy`1.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="configurationPath">配置文件路径</param>
            <param name="endpointName">终结点名称</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.ServiceRealProxy`1.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            当前实例所表示的远程对象调用在所提供的 IMessage 中指定的方法。
            </summary>
            <param name="msg">消息通讯数据</param>
            <returns>消息数据</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.ServiceRealProxy`1.GetOperationName(System.Reflection.MethodBase)">
            <summary>
            获取操作名称
            </summary>
            <param name="method">操作</param>
            <returns>操作名称</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.ServiceRealProxy`1.GetParameters(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            获取消息调用参数
            </summary>
            <param name="mcm">调用消息接口</param>
            <returns>参数字典</returns>
        </member>
        <member name="T:Better.Infrastructures.WCF.ContextReceivalCallContextInitializer">
            <summary>
            自定义上下文接收初始化和回收接口（本文件可以不用）
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.ContextReceivalCallContextInitializer.AfterInvoke(System.Object)">
            <summary>
            实现它来参与清理调用该操作的线程
            </summary>
            <param name="correlationState">从 BeforeInvoke 方法返回的关联对象</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.ContextReceivalCallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)">
            <summary>
            Invoke方法之前，从消息头中取到TrackId
            </summary>
            <param name="instanceContext">操作的服务实例</param>
            <param name="channel">客户端通道</param>
            <param name="message">传入消息</param>
            <returns>作为 AfterInvoke 方法的参数传回的关联对象</returns>
        </member>
        <member name="T:Better.Infrastructures.WCF.CommonCommunication">
            <summary>
            WCF服务端公用通信类
            </summary>
        </member>
        <member name="P:Better.Infrastructures.WCF.CommonCommunication.ServerIP">
            <summary>
            WCF服务端IP
            </summary>
        </member>
        <member name="P:Better.Infrastructures.WCF.CommonCommunication.ClientIP">
            <summary>
            WCF客户端IP
            </summary>
        </member>
        <member name="T:Better.Infrastructures.WCF.ContextAttachingMessageInspector">
            <summary>
            客户端自定义消息检查器
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.ContextAttachingMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            在收到回复消息之后将它传递回客户端应用程序之前，启用消息的检查或修改
            </summary>
            <param name="reply">要转换为类型并交回给客户端应用程序的消息</param>
            <param name="correlationState">关联状态数据</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.ContextAttachingMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
            在发送请求消息之前，将TrackId放到消息头
            </summary>
            <param name="request">要发送给服务的消息</param>
            <param name="channel">WCF 客户端对象通道</param>
            <returns>当前TrackID</returns>
        </member>
        <member name="T:Better.Infrastructures.WCF.ContextName">
            <summary>
            传递消息头使用的命名空间和名称
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.ContextName.ContextHeaderLocalName">
            <summary>
            消息头名称
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.ContextName.ContextHeaderNamespace">
            <summary>
            消息头命名空间
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.ContextName.DefautlTrackID">
            <summary>
            消息头命名空间
            </summary>
        </member>
        <member name="T:Better.Infrastructures.WCF.DuplexServiceProxyFactory">
            <summary>
            WCF双工通信
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.DuplexServiceProxyFactory.Create``2(System.String,System.String,``1)">
            <summary>
            创建WCF双工通信客户端代理类
            </summary>
            <typeparam name="T">契约接口类型</typeparam>
            <typeparam name="TCallBack">实现回调契约接口的类类型</typeparam>
            <param name="configurationPath">配置文件路径</param>
            <param name="endpointName">终结点名称</param>
            <param name="callBack">实现回调契约接口的类对象</param>
            <returns>客户端代理</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.DuplexServiceProxyFactory.GetEndpointAddress``2(System.String,System.String)">
            <summary>
            根据config路径和和终结点名称获取真实终结点
            </summary>
            <typeparam name="T">契约接口类型</typeparam>
            <typeparam name="TCallBack">实现回调契约接口的类类型</typeparam>
            <param name="configurationPath">config路径</param>
            <param name="endpointName">终结点名称</param>
            <returns>终结点地址</returns>
        </member>
        <member name="T:Better.Infrastructures.WCF.ServiceLogCallHandler">
            <summary>
            服务端日志处理类
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.ServiceLogCallHandler.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>
            触发服务端方法，记录Acc日志
            </summary>
            <param name="input">当前调用的输入目标</param>
            <param name="getNext">委托执行的处理链中的下一个代理</param>
            <returns>目标返回值</returns>
        </member>
        <member name="P:Better.Infrastructures.WCF.ServiceLogCallHandler.Order">
            <summary>
            执行顺序
            </summary>
        </member>
        <member name="P:Better.Infrastructures.WCF.ServiceLogCallHandler.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:Better.Infrastructures.WCF.DispatchMessageInspector">
            <summary>
            自定义调度消息检查
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.DispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
            <summary>
            服务端获取到请求(请求的方法未找到记录日志)
            </summary>
            <param name="request">请求消息</param>
            <param name="channel">传入通道</param>
            <param name="instanceContext">当前服务实例</param>
            <returns>用于关联状态的对象。 该对象将在 BeforeSendReply 方法中传回</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.DispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            在操作已返回后发送回复消息之前调用
            </summary>
            <param name="reply">回复消息。 如果操作是单向的，则此值为 null</param>
            <param name="correlationState">从 AfterReceiveRequest 方法返回的关联对象</param>
        </member>
        <member name="T:Better.Infrastructures.WCF.DuplexChannelFactoryCreator">
            <summary>
            双工通道工厂创建者
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.DuplexChannelFactoryCreator.channelFactories">
            <summary>
            工厂Hasht表
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.DuplexChannelFactoryCreator.Create``1(System.Object,System.String,System.String)">
            <summary>
            创建双工通道工厂方法
            </summary>
            <typeparam name="T">双工通道类型</typeparam>
            <param name="callbackObject">回调对象</param>
            <param name="configurationPath">配置路径</param>
            <param name="endpointName">终结点名称</param>
            <returns>双工通道工厂</returns>
        </member>
        <member name="T:Better.Infrastructures.WCF.CustomClientDuplexChannel`1">
            <summary>
            定制双工通道工厂
            </summary>
            <typeparam name="T">通道类型</typeparam>
        </member>
        <member name="F:Better.Infrastructures.WCF.CustomClientDuplexChannel`1.configurationPath">
            <summary>
            配置路径
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.CustomClientDuplexChannel`1.endpointConfigurationName">
            <summary>
            终结点名称
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientDuplexChannel`1.#ctor(System.Object,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="callbackObject">回调对象</param>
            <param name="endpointConfigurationName">终结点名称</param>
            <param name="configurationPath">配置路径</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientDuplexChannel`1.#ctor(System.Type,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="callbackInstanceType">回调实例类型</param>
            <param name="endpointConfigurationName">终结点配置名称</param>
            <param name="configurationPath">配置路径</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientDuplexChannel`1.CreateDescription">
            <summary>
            创建服务终结点的说明
            </summary>
            <returns>服务终结点</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientDuplexChannel`1.ApplyConfiguration(System.String)">
            <summary>
            使用由指定配置名称提供的行为和通道工厂服务终结点中的那些行为来初始化通道工厂
            </summary>
            <param name="configurationName">配置名称</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientDuplexChannel`1.AddBehaviors(System.String,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceModelSectionGroup)">
            <summary>
             添加行为
            </summary>
            <param name="behaviorConfiguration">行为配置</param>
            <param name="serviceEndpoint">服务终结点</param>
            <param name="group">服务模型主配置节</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientDuplexChannel`1.CreateBinding(System.String,System.ServiceModel.Configuration.ServiceModelSectionGroup)">
            <summary>
            创建绑定
            </summary>
            <param name="bindingName">绑定名称</param>
            <param name="group">服务模型主配置节</param>
            <returns>绑定</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientDuplexChannel`1.GetBinding(System.ServiceModel.Configuration.IBindingConfigurationElement)">
            <summary>
            获取绑定
            </summary>
            <param name="configurationElement">绑定配置元素</param>
            <returns>绑定</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientDuplexChannel`1.GetIdentity(System.ServiceModel.Configuration.IdentityElement)">
            <summary>
            获取绑定标识属性
            </summary>
            <param name="element">标识属性元素</param>
            <returns>终结点标识属性</returns>
        </member>
        <member name="T:Better.Infrastructures.WCF.ServiceProxyFactory">
            <summary>
            服务代理工厂
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.ServiceProxyFactory.Create``1(System.String,System.String)">
            <summary>
            创建服务代理
            </summary>
            <typeparam name="T">契约接口类型</typeparam>
            <param name="configurationPath">配置文件路径</param>
            <param name="endpointName">终结点名称</param>
            <returns>服务代理</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.ServiceProxyFactory.GetEndpointAddress``1(System.String,System.String)">
            <summary>
            获取代理终结点地址
            </summary>
            <typeparam name="T">契约接口类型</typeparam>
            <param name="configurationPath">配置文件路径</param>
            <param name="endpointName">终结点名称</param>
            <returns>终结点地址</returns>
        </member>
        <member name="T:Better.Infrastructures.WCF.CustomClientChannel`1">
            <summary>
            自定义的客户端信道(允许从自定义的配置文件中加载)
            </summary>
            <typeparam name="T">定制客户端通道类型</typeparam>
        </member>
        <member name="F:Better.Infrastructures.WCF.CustomClientChannel`1.configurationPath">
            <summary>
            配置路径
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.CustomClientChannel`1.endpointConfigurationName">
            <summary>
            终结点配置名称
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientChannel`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="configurationPath">config路径</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientChannel`1.#ctor(System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="binding">bind名称</param>
            <param name="configurationPath">config路径</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientChannel`1.#ctor(System.ServiceModel.Description.ServiceEndpoint,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="serviceEndpoint">服务终结点</param>
            <param name="configurationPath">config路径</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientChannel`1.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="endpointConfigurationName">终结点配置名称</param>
            <param name="configurationPath">config路径</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientChannel`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="binding">绑定</param>
            <param name="endpointAddress">终结点地址</param>
            <param name="configurationPath">config路径</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientChannel`1.#ctor(System.ServiceModel.Channels.Binding,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="binding">绑定类型</param>
            <param name="remoteAddress">远程地址</param>
            <param name="configurationPath">配置路径</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientChannel`1.#ctor(System.String,System.ServiceModel.EndpointAddress,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="endpointConfigurationName">终结点配置名称</param>
            <param name="endpointAddress">终结点地址</param>
            <param name="configurationPath">配置路径</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientChannel`1.CreateDescription">
            <summary>
            从自定义配置文件中加载终结点描述
            </summary>
            <returns>服务终结点</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientChannel`1.ApplyConfiguration(System.String)">
            <summary>
            应用配置
            </summary>
            <param name="configurationName">配置名称</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientChannel`1.CreateBinding(System.String,System.ServiceModel.Configuration.ServiceModelSectionGroup)">
            <summary>
            为所选择的终结点配置绑定
            </summary>
            <param name="bindingName">bind名称</param>
            <param name="group">服务模型节组</param>
            <returns>绑定</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientChannel`1.GetBinding(System.ServiceModel.Configuration.IBindingConfigurationElement)">
            <summary>
            创建匹配绑定的方法
            </summary>
            <param name="configurationElement">配置元素</param>
            <returns>绑定</returns>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientChannel`1.AddBehaviors(System.String,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceModelSectionGroup)">
            <summary>
            添加configured behavior 到所选择的终结点
            </summary>
            <param name="behaviorConfiguration">行为配置</param>
            <param name="serviceEndpoint">服务终结点</param>
            <param name="group">服务模型节组</param>
        </member>
        <member name="M:Better.Infrastructures.WCF.CustomClientChannel`1.GetIdentity(System.ServiceModel.Configuration.IdentityElement)">
            <summary>
            从配置文件重获取终结点的identity 
            </summary>
            <param name="element">标识元素</param>
            <returns>终结点标识元素</returns>
        </member>
        <member name="T:Better.Infrastructures.WCF.ChannelFactoryCreator">
            <summary>
            通道工厂创建器
            </summary>
        </member>
        <member name="F:Better.Infrastructures.WCF.ChannelFactoryCreator.channelFactories">
            <summary>
            通道创建工厂缓存表
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.ChannelFactoryCreator.Create``1(System.String,System.String)">
            <summary>
            创建通道工厂
            </summary>
            <typeparam name="T">通道</typeparam>
            <param name="configurationPath">config路径</param>
            <param name="endpointName">终结点名称</param>
            <returns>通道工厂</returns>
        </member>
        <member name="T:Better.Infrastructures.WCF.ServiceLogCallHandlerAttribute">
            <summary>
            服务日志处理特性
            </summary>
        </member>
        <member name="M:Better.Infrastructures.WCF.ServiceLogCallHandlerAttribute.CreateHandler(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            创建处理器
            </summary>
            <param name="container">依赖注入容器</param>
            <returns>处理器</returns>
        </member>
        <member name="P:Better.Infrastructures.WCF.ServiceLogCallHandlerAttribute.Message">
            <summary>
            消息
            </summary>
        </member>
    </members>
</doc>
