<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Better517na.Core.AsyncInfrastructure.CommonCallHelper</name>
    </assembly>
    <members>
        <member name="T:Better517na.Core.AsyncInfrastructure.Wcf.DuplexServiceProxyFactory">
            <summary>
            wcf双工通信
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.DuplexServiceProxyFactory.Create``2(System.String,System.String,``1)">
            <summary>
            创建wcf双工通信客户端代理类
            </summary>
            <typeparam name="T">契约接口类型</typeparam>
            <typeparam name="TCallBack">实现回调契约接口的类类型</typeparam>
            <param name="configurationPath">配置文件路径</param>
            <param name="endpointName">终结点名称</param>
            <param name="callBack">实现回调契约接口的类对象</param>
            <returns></returns>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.ServiceControllerHelper">
            <summary>
            总控调用帮助
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ServiceControllerHelper.RecordCheckDetail(Better517na.Core.AsyncInfrastructure.Model.MServiceRoute,System.Int32)">
            <summary>
            调用总控服务写调用明细
            </summary>
            <param name="route">路由信息</param>
            <param name="type">类型 0异常 1恢复 2不能检测</param>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute">
            <summary>
            服务路由model
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute.bindingType">
            <summary>
            绑定类型
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute.RouteID">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute.ContractName">
            <summary>
            契约全名
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute.MachineNo">
            <summary>
            机器编号
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute.DataCenter">
            <summary>
            机房代码（KEYID组件中的那个）
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute.UniqueSign">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute.BindingType">
            <summary>
            绑定类型 net.tcp等
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute.ServiceIP">
            <summary>
            目标服务IP
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute.ServicePort">
            <summary>
            目标服务端口
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute.SvcPath">
            <summary>
            svc文件相对路径 例如 PolicyManagementService.svc 
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute.IsVirtualAddress">
            <summary>
            是否是虚拟地址
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute.IsValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Model.MServiceRoute.ModifyTime">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.Wcf.CommonCommunication">
            <summary>
            WCF服务端公用通信类
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Wcf.CommonCommunication.ServerIP">
            <summary>
            WCF服务端IP
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.Wcf.CommonCommunication.ClientIP">
            <summary>
            WCF客户端IP
            </summary>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.PollingDealer">
            <summary>
            轮询处理器
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.PollingDealer.pollingDic">
            <summary>
            每个契约对应一个计数
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.PollingDealer.syncRoot">
            <summary>
            写锁
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.PollingDealer.random">
            <summary>
            随机码生成
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.PollingDealer.GetPollingServiceRoute(System.Collections.Generic.List{Better517na.Core.AsyncInfrastructure.Model.MServiceRoute},System.String,Better.Infrastructures.Log.TrackID)">
            <summary>
            进行轮询，得出一个轮询后的结果
            </summary>
            <param name="source">轮询数据源</param>
            <param name="contract">契约</param>
            <param name="trackID">跟踪码</param>
            <returns>轮询得到的路由</returns>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.ExceptionList">
            <summary>
            维护需要判定的异常列表
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ExceptionList.exceptions">
            <summary>
            异常类型列表
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ExceptionList.#cctor">
            <summary>
            静态构造
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ExceptionList.Exceptions">
            <summary>
            异常类型列表属性
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.Wcf.ServiceLogCallHandler.logBus">
            <summary>
            日志组件业务对象............
            </summary>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.RouteRemoveThreadArg">
            <summary>
            无效检测路由移除参数
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.RouteRemoveThreadArg.Contract">
            <summary>
            契约全名
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.RouteRemoveThreadArg.ValidRoutes">
            <summary>
            可用路由
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.RouteRemoveThreadArg.TrackId">
            <summary>
            跟踪码
            </summary>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.HeartBeatHelper">
            <summary>
            心跳检测调用辅助
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.HeartBeatHelper.HeartBeat(Better517na.Core.AsyncInfrastructure.Model.MServiceRoute)">
            <summary>
            校验方法,调用对方地址和端口的对应的SVC
            </summary>
            <param name="arg">路由</param>
            <returns>0异常 1恢复 2服务端可能没有发布心跳契约</returns>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.AdditionalParam">
            <summary>
            路由附加参数,对外参数
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.AdditionalParam.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.AdditionalParam.LogKey1">
            <summary>
            新ACC日志key1
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.AdditionalParam.LogKey2">
            <summary>
            新ACC日志key2
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.AdditionalParam.LogKey3">
            <summary>
            新ACC日志key3
            </summary>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.Wcf.ServiceRealProxy`1">
            <summary>
            服务透明代理
            </summary>
            <typeparam name="T">契约</typeparam>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.Wcf.ServiceRealProxy`1.myconfigurationPath">
            <summary>
            配置文件地址
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.Wcf.ServiceRealProxy`1.myendpointName">
            <summary>
            终结点名
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.Wcf.ServiceRealProxy`1.myserviceAddress">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.Wcf.ServiceRealProxy`1.myuseServiceAddress">
            <summary>
            是否使用传入服务地址
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.Wcf.ServiceRealProxy`1.timeOutSpan">
            <summary>
            客户端超时时间
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.ServiceRealProxy`1.#ctor(System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="configurationPath">配置文件地址</param>
            <param name="endpointName">终结点名</param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.ServiceRealProxy`1.#ctor(System.String,System.String,System.String,System.Boolean,System.TimeSpan)">
            <summary>
            重载，使用传入的服务地址连接
            </summary>
            <param name="configurationPath">配置文件地址</param>
            <param name="endpointName">终结点名</param>
            <param name="serviceAddress">服务地址</param>
            <param name="useServiceAddress">是否使用传入服务地址</param>
            <param name="timeout">客户端超时时间</param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.ServiceRealProxy`1.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            调用实际方法
            </summary>
            <param name="msg">入参消息</param>
            <returns>返回值消息</returns>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.ExceptionDetialKey">
            <summary>
            异常详细的key
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ExceptionDetialKey.ContractName">
            <summary>
            契约全名
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ExceptionDetialKey.IpPort">
            <summary>
            IP及端口
            </summary>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1">
            <summary>
            自定义的客户端信道(允许从自定义的配置文件中加载)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.serviceAddress">
            <summary>
            传入的服务地址
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.useServiceAddress">
            <summary>
            是否使用传入的服务地址和协定（协定取泛型T的全名）
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="configurationPath"></param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.#ctor(System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="binding"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.#ctor(System.ServiceModel.Description.ServiceEndpoint,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="serviceEndpoint"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="endpointConfigurationName"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            构造函数,可选择是否用传入的服务地址
            </summary>
            <param name="endpointConfigurationName"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="binding"></param>
            <param name="endpointAddress"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.#ctor(System.ServiceModel.Channels.Binding,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="binding"></param>
            <param name="remoteAddress"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.#ctor(System.String,System.ServiceModel.EndpointAddress,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="endpointConfigurationName"></param>
            <param name="endpointAddress"></param>
            <param name="configurationPath"></param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.CreateDescription">
            <summary>
            从自定义配置文件中加载终结点描述
            </summary>
            <returns></returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.CreateBinding(System.String,System.ServiceModel.Configuration.ServiceModelSectionGroup)">
            <summary>
            为所选择的终结点配置绑定
            </summary>
            <param name="bindingName"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.GetBinding(System.ServiceModel.Configuration.IBindingConfigurationElement)">
            <summary>
            一些创建匹配绑定的方法
            </summary>
            <param name="configurationElement"></param>
            <returns></returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.AddBehaviors(System.String,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceModelSectionGroup)">
            <summary>
            添加configured behavior 到所选择的终结点
            </summary>
            <param name="behaviorConfiguration"></param>
            <param name="serviceEndpoint"></param>
            <param name="group"></param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.CustomClientChannel`1.GetIdentity(System.ServiceModel.Configuration.IdentityElement)">
            <summary>
            从配置文件重获取终结点的identity 
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.ServerUniqueInfoThreadArg">
            <summary>
            服务信息线程参数
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ServerUniqueInfoThreadArg.ContractName">
            <summary>
            契约名
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ServerUniqueInfoThreadArg.MachineNo">
            <summary>
            机器号
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ServerUniqueInfoThreadArg.DataCenter">
            <summary>
            机房编号
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ServerUniqueInfoThreadArg.UniqueSign">
            <summary>
            程序唯一标识
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ServerUniqueInfoThreadArg.TrackId">
            <summary>
            跟踪码
            </summary>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.ExceptionCheck">
            <summary>
            异常检测类，负责异常检测，心跳检测恢复，可用连接的移除和恢复，通知总控服务
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ExceptionCheck.exceptionNum">
            <summary>
            每分钟异常数阈值
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ExceptionCheck.removeRate">
            <summary>
            移除比例，大于等于3个是按照35排除
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ExceptionCheck.exceptionNumDic">
            <summary>
            异常计数列表，记录对应的路由连续发生了多少次异常，如果有正常的请求则清0
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ExceptionCheck.exceptionSyncRoot">
            <summary>
            异常详细同步锁
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ExceptionCheck.checkList">
            <summary>
            待检测列表
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ExceptionCheck.downtimeIPList">
            <summary>
            宕机列表
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ExceptionCheck.checkListSyncRoot">
            <summary>
            检测列表更新锁
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ExceptionCheck.checkThread">
            <summary>
            心跳检测线程
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ExceptionCheck.downTimeIPThread">
            <summary>
            宕机IP获取线程
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ExceptionCheck.#cctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ExceptionCheck.GetUsableRoutes(System.Collections.Generic.List{Better517na.Core.AsyncInfrastructure.Model.MServiceRoute},System.String)">
            <summary>
            从传入的路由中排除已经检测为失效的路由
            </summary>
            <param name="source">路由源</param>
            <param name="contract">契约</param>
            <returns>筛选后路由</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ExceptionCheck.Check(System.Exception,Better517na.Core.AsyncInfrastructure.Model.MServiceRoute,Better.Infrastructures.Log.TrackID)">
            <summary>
            异常检测
            </summary>
            <param name="ex">异常</param>
            <param name="route">异常对应的路由</param>
            <param name="trackID">跟踪码</param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ExceptionCheck.CheckThreadMethod">
            <summary>
            心跳检测线程方法
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ExceptionCheck.DownTimeIPThreadMethod">
            <summary>
            宕机服务器获取线程方法
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ExceptionCheck.ExceptionDeal(System.Object)">
            <summary>
            处理异常的线程方法
            </summary>
            <param name="obj">路由信息</param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ExceptionCheck.UpdateCheckList(Better517na.Core.AsyncInfrastructure.Model.MServiceRoute,System.Int32)">
            <summary>
            更新检测列表
            </summary>
            <param name="arg">路由</param>
            <param name="updateType">更新类型 0 添加 1 移除</param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ExceptionCheck.HeartBeat(Better517na.Core.AsyncInfrastructure.Model.MServiceRoute)">
            <summary>
            心跳检测
            </summary>
            <param name="arg">路由</param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ExceptionCheck.IsMatchException(System.Exception,System.Type)">
            <summary>
            是否匹配
            </summary>
            <param name="ex">异常</param>
            <param name="item">配置异常的类型</param>
            <returns>是否匹配到</returns>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.Wcf.ServiceProxyFactory">
            <summary>
            服务代理工厂
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.ServiceProxyFactory.Create``1(System.String,System.String)">
            <summary>
            创建透明代理
            </summary>
            <typeparam name="T">契约</typeparam>
            <param name="configurationPath">配置文件地址</param>
            <param name="endpointName">终结点名</param>
            <returns>返回契约代理</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.ServiceProxyFactory.Create``1(System.String,System.String,System.String,System.Boolean,System.TimeSpan)">
            <summary>
            重载，传入连接，协定和连接都会被替换
            </summary>
            <typeparam name="T">契约</typeparam>
            <param name="configurationPath">配置文件地址</param>
            <param name="endpointName">终结点名</param>
            <param name="serviceAddress">服务地址</param>
            <param name="useServiceAddress">是否使用传入的服务地址</param>
            <param name="timeout">客户端超时时间</param>
            <returns>返回契约代理</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.ServiceProxyFactory.GetEndpointAddress``1(System.String,System.String)">
            <summary>
            通过终结点获取地址（老方式，非路由）
            </summary>
            <typeparam name="T">契约</typeparam>
            <param name="configurationPath">配置文件路径</param>
            <param name="endpointName">终结点名</param>
            <returns>服务地址</returns>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.Wcf.ChannelFactoryCreator">
            <summary>
            信道工厂创建处理器
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.Wcf.ChannelFactoryCreator.channelFactories">
            <summary>
            正常信道工厂缓存
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.Wcf.ChannelFactoryCreator.timeoutChannelFactories">
            <summary>
            具有超时时间的信道工厂缓存
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.Wcf.ChannelFactoryCreator.dicSyncRoot">
            <summary>
            Dictionary同步对象
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.ChannelFactoryCreator.Create``1(System.String,System.String)">
            <summary>
            创建信道工厂
            </summary>
            <typeparam name="T">契约</typeparam>
            <param name="configurationPath">配置文件路径</param>
            <param name="endpointName">终结点名</param>
            <returns>信道工厂</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.Wcf.ChannelFactoryCreator.Create``1(System.String,System.String,System.String,System.Boolean,System.TimeSpan)">
            <summary>
            创建信道工厂
            </summary>
            <typeparam name="T">契约</typeparam>
            <param name="configurationPath">配置文件路径</param>
            <param name="endpointName">终结点名</param>
            <param name="serviceAddress">服务地址</param>
            <param name="useServiceAddress">是否直接使用传入服务地址</param>
            <param name="timeOutSpan">客户端超时时间间隔</param>
            <returns>信道工厂</returns>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.ConfigMonitor">
            <summary>
            配置文件监听器类：监听配置文件变更 
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ConfigMonitor.callHelperConfig">
            <summary>
            连接配置 Configuration
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ConfigMonitor.map">
            <summary>
            连接配置文件 ExeConfigurationFileMap
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConfigMonitor.#cctor">
            <summary>
            构造函数:初始化读取配置文件，为文件注册侦听器
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConfigMonitor.MonitorConfigFile">
            <summary>
            创建配置文件发动监听器
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConfigMonitor.RaiseEvent">
            <summary>
            向订阅者发布信息（配置文件变更时）
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConfigMonitor.InitConnectionConfig">
            <summary>
            初始化数据库连接配置
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConfigMonitor.OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            文件改变：重新加载配置
            </summary>
            <param name="source">事件源 object</param>
            <param name="e">事件参数 FileSystemEventArgs</param>
        </member>
        <member name="E:Better517na.Core.AsyncInfrastructure.ConfigMonitor.ConfigModifyInfoEvent">
            <summary>
            配置文件变更事件 event
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ConfigMonitor.CallHelperConfig">
            <summary>
            配置对象 Configuration
            </summary>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.ConfigMonitor.EventHandlerAfterConfigModify">
            <summary>
            配置文件变更代理 delegate
            </summary>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.ConfigFetcher">
            <summary>
            配置项获取类
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ConfigFetcher.uniqueSign">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.ConfigFetcher.addressCacheTime">
            <summary>
            地址缓存时间（本地缓存）单位毫秒
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConfigFetcher.#cctor">
            <summary>
            静态构造方法
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConfigFetcher.RefreshConfig">
            <summary>
            配置刷新
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ConfigFetcher.UniqueSign">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ConfigFetcher.AddressCacheTime">
            <summary>
            地址缓存时间（本地缓存）单位毫秒
            </summary>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.LocalCache">
            <summary>
            本次缓存
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.LocalCache.addressCache">
            <summary>
            服务地址缓存
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.LocalCache.syncRoot">
            <summary>
            更新锁
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.LocalCache.contractSyncRootDic">
            <summary>
            契约更新锁集合
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.LocalCache.dicSyncRoot">
            <summary>
            集合更新锁
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.LocalCache.GetCacheAddress(System.String,System.String,System.String,System.String,Better.Infrastructures.Log.TrackID)">
            <summary>
            获取缓存路由地址
            </summary>
            <param name="contractName">契约名</param>
            <param name="machineNo">机器编号</param>
            <param name="dataCenter">机房编号</param>
            <param name="uniqueSign">程序唯一标识</param>
            <param name="trackID">跟踪码</param>
            <returns>路由信息</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.LocalCache.UpdateCacheAsync(System.Object)">
            <summary>
            更新缓存异步方法
            </summary>
            <param name="obj">服务信息线程参数</param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.LocalCache.GetRoutesFromDB(System.String,System.String,System.String,System.String)">
            <summary>
            数据库获取路由并更新缓存
            </summary>
            <param name="contractName">契约</param>
            <param name="machineNo">机器号</param>
            <param name="dataCenter">机房标识</param>
            <param name="uniqueSign">唯一标识</param>
            <returns>路由信息</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.LocalCache.GetIsNeedUpdate(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.KeyValuePair{System.DateTime,System.Collections.Generic.List{Better517na.Core.AsyncInfrastructure.Model.MServiceRoute}}},System.String)">
            <summary>
            获取缓存是否需要更新
            </summary>
            <param name="tempAddressCache">路由缓存</param>
            <param name="key">缓存key</param>
            <returns>是否需要更新</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.LocalCache.SetCacheAddress(System.String,System.Collections.Generic.List{Better517na.Core.AsyncInfrastructure.Model.MServiceRoute})">
            <summary>
            设置缓存地址
            </summary>
            <param name="key">缓存key</param>
            <param name="address">路由列表</param>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.WcfCallHelper">
            <summary>
            通用WCF服务调用帮助类
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.WcfCallHelper.instance">
            <summary>
            单例
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.WcfCallHelper.syncRoot">
            <summary>
            单例同步root
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.#ctor">
            <summary>
            私有构造
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``2(System.String)">
            <summary>
            无参数版执行方法 T为契约 V为返回值
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="methodName">方法名</param>
            <returns>返回值实例</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``2(System.String,System.TimeSpan)">
            <summary>
            无参数版执行方法 T为契约 V为返回值
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="methodName">方法名</param>
            <param name="timeout">客户端超时时间,小于等于0使用配置文件默认值</param>
            <returns>返回值实例</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``2(System.String,Better517na.Core.AsyncInfrastructure.AdditionalParam)">
            <summary>
            无参数版执行方法 T为契约 V为返回值
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="methodName">方法名</param>
            <param name="addParam">附加参数</param>
            <returns>返回值实例</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``3(``1,System.String)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W">参数类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param">参数</param>
            <param name="methodName">方法名</param>
            <returns>返回值实例</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``3(``1,System.String,System.TimeSpan)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W">参数类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param">参数</param>
            <param name="methodName">方法名</param>
            <param name="timeout">客户端超时时间,小于等于0使用配置文件默认值</param>
            <returns>返回值实例</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``3(``1,System.String,Better517na.Core.AsyncInfrastructure.AdditionalParam)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W">参数类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param">参数</param>
            <param name="methodName">方法名</param>
            <param name="addParam">附加参数</param>
            <returns>返回值实例</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``3(``1,System.String,Better.Infrastructures.Log.TrackID)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W">参数类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param">参数</param>
            <param name="methodName">方法名</param>
            <param name="trackID">跟踪ID</param>
            <returns>返回值实例</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``3(``1,System.String,System.TimeSpan,Better.Infrastructures.Log.TrackID)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W">参数类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param">参数</param>
            <param name="methodName">方法名</param>
            <param name="timeout">客户端超时时间,小于等于0使用配置文件默认值</param>
            <param name="trackID">跟踪ID</param>
            <returns>返回值实例</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``3(``1,System.String,Better517na.Core.AsyncInfrastructure.AdditionalParam,Better.Infrastructures.Log.TrackID)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W">参数类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param">参数</param>
            <param name="methodName">方法名</param>
            <param name="addParam">附加参数</param>
            <param name="trackID">跟踪ID</param>
            <returns>返回值实例</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``4(``1,``2,System.String)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值 推荐使用Invoke《T, W, V》(W param, string methodName)
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W1">参数1类型</typeparam>
            <typeparam name="W2">参数2类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param1">参数1</param>
            <param name="param2">参数2</param>
            <param name="methodName">方法名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``4(``1,``2,System.String,System.TimeSpan)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值 推荐使用Invoke《T, W, V》(W param, string methodName)
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W1">参数1类型</typeparam>
            <typeparam name="W2">参数2类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param1">参数1</param>
            <param name="param2">参数2</param>
            <param name="methodName">方法名</param>
            <param name="timeout">客户端超时时间,小于等于0使用配置文件默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``4(``1,``2,System.String,Better517na.Core.AsyncInfrastructure.AdditionalParam)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值 推荐使用Invoke《T, W, V》(W param, string methodName)
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W1">参数1类型</typeparam>
            <typeparam name="W2">参数2类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param1">参数1</param>
            <param name="param2">参数2</param>
            <param name="methodName">方法名</param>
            <param name="addParam">附加参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``5(``1,``2,``3,System.String)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值 推荐使用Invoke《T, W, V》(W param, string methodName)
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W1">参数1类型</typeparam>
            <typeparam name="W2">参数2类型</typeparam>
            <typeparam name="W3">参数3类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param1">参数1</param>
            <param name="param2">参数2</param>
            <param name="param3">参数3</param>
            <param name="methodName">方法名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``5(``1,``2,``3,System.String,System.TimeSpan)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值 推荐使用Invoke《T, W, V》(W param, string methodName)
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W1">参数1类型</typeparam>
            <typeparam name="W2">参数2类型</typeparam>
            <typeparam name="W3">参数3类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param1">参数1</param>
            <param name="param2">参数2</param>
            <param name="param3">参数3</param>
            <param name="methodName">方法名</param>
            <param name="timeout">客户端超时时间,小于等于0使用配置文件默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``5(``1,``2,``3,System.String,Better517na.Core.AsyncInfrastructure.AdditionalParam)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值 推荐使用Invoke《T, W, V》(W param, string methodName)
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W1">参数1类型</typeparam>
            <typeparam name="W2">参数2类型</typeparam>
            <typeparam name="W3">参数3类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param1">参数1</param>
            <param name="param2">参数2</param>
            <param name="param3">参数3</param>
            <param name="methodName">方法名</param>
            <param name="addParam">附加参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``6(``1,``2,``3,``4,System.String)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值 推荐使用Invoke《T, W, V》(W param, string methodName)
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W1">参数1类型</typeparam>
            <typeparam name="W2">参数2类型</typeparam>
            <typeparam name="W3">参数3类型</typeparam>
            <typeparam name="W4">参数4类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param1">参数1</param>
            <param name="param2">参数2</param>
            <param name="param3">参数3</param>
            <param name="param4">参数4</param>
            <param name="methodName">方法名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``6(``1,``2,``3,``4,System.String,System.TimeSpan)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值 推荐使用Invoke《T, W, V》(W param, string methodName)
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W1">参数1类型</typeparam>
            <typeparam name="W2">参数2类型</typeparam>
            <typeparam name="W3">参数3类型</typeparam>
            <typeparam name="W4">参数4类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param1">参数1</param>
            <param name="param2">参数2</param>
            <param name="param3">参数3</param>
            <param name="param4">参数4</param>
            <param name="methodName">方法名</param>
            <param name="timeout">客户端超时时间,小于等于0使用配置文件默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``6(``1,``2,``3,``4,System.String,Better517na.Core.AsyncInfrastructure.AdditionalParam)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值 推荐使用Invoke《T, W, V》(W param, string methodName)
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W1">参数1类型</typeparam>
            <typeparam name="W2">参数2类型</typeparam>
            <typeparam name="W3">参数3类型</typeparam>
            <typeparam name="W4">参数4类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param1">参数1</param>
            <param name="param2">参数2</param>
            <param name="param3">参数3</param>
            <param name="param4">参数4</param>
            <param name="methodName">方法名</param>
            <param name="addParam">附加参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``7(``1,``2,``3,``4,``5,System.String)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值 推荐使用Invoke《T, W, V》(W param, string methodName)
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W1">参数1类型</typeparam>
            <typeparam name="W2">参数2类型</typeparam>
            <typeparam name="W3">参数3类型</typeparam>
            <typeparam name="W4">参数4类型</typeparam>
            <typeparam name="W5">参数5类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param1">参数1</param>
            <param name="param2">参数2</param>
            <param name="param3">参数3</param>
            <param name="param4">参数4</param>
            <param name="param5">参数5</param>
            <param name="methodName">方法名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``7(``1,``2,``3,``4,``5,System.String,System.TimeSpan)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值 推荐使用Invoke《T, W, V》(W param, string methodName)
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W1">参数1类型</typeparam>
            <typeparam name="W2">参数2类型</typeparam>
            <typeparam name="W3">参数3类型</typeparam>
            <typeparam name="W4">参数4类型</typeparam>
            <typeparam name="W5">参数5类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param1">参数1</param>
            <param name="param2">参数2</param>
            <param name="param3">参数3</param>
            <param name="param4">参数4</param>
            <param name="param5">参数5</param>
            <param name="methodName">方法名</param>
            <param name="timeout">客户端超时时间,小于等于0使用配置文件默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Invoke``7(``1,``2,``3,``4,``5,System.String,Better517na.Core.AsyncInfrastructure.AdditionalParam)">
            <summary>
            执行方法 T为契约 W为参数 V为返回值 推荐使用Invoke《T, W, V》(W param, string methodName)
            </summary>
            <typeparam name="T">契约</typeparam>
            <typeparam name="W1">参数1类型</typeparam>
            <typeparam name="W2">参数2类型</typeparam>
            <typeparam name="W3">参数3类型</typeparam>
            <typeparam name="W4">参数4类型</typeparam>
            <typeparam name="W5">参数5类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="param1">参数1</param>
            <param name="param2">参数2</param>
            <param name="param3">参数3</param>
            <param name="param4">参数4</param>
            <param name="param5">参数5</param>
            <param name="methodName">方法名</param>
            <param name="addParam">附加参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.InnerInvoke``2(System.String,System.Object[],System.TimeSpan,Better.Infrastructures.Log.TrackID,Better517na.Core.AsyncInfrastructure.AdditionalParam,System.Type[])">
            <summary>
            统一调用方法
            </summary>
            <typeparam name="T">契约类型</typeparam>
            <typeparam name="V">返回值类型</typeparam>
            <param name="methodName">方法名</param>
            <param name="param">入参</param>
            <param name="timeout">客户端超时时间</param>
            <param name="trackID">跟踪码</param>
            <param name="addParam">附加参数</param>
            <param name="paramTypes">调用方法的参数类型</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.GetContractInstance``1(System.String@,Better517na.Core.AsyncInfrastructure.Model.MServiceRoute@,System.TimeSpan,Better.Infrastructures.Log.TrackID)">
            <summary>
            通用服务调用
            </summary>
            <typeparam name="T">契约</typeparam>
            <param name="address">输出地址</param>
            <param name="route">输出路由</param>
            <param name="timeout">客户端超时时间</param>
            <param name="trackID">跟踪码</param>
            <returns>契约实例</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.ValidateMethodCall(System.String)">
            <summary>
            验证方法调用顺序
            </summary>
            <param name="contractName">契约名</param>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.GetLayerNum(System.String)">
            <summary>
            获取分层数值
            </summary>
            <param name="name">分层标识</param>
            <returns>分层数值</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.WcfCallHelper.GetAddress(System.String,Better.Infrastructures.Log.TrackID)">
            <summary>
            根据契约全名获取连接地址
            </summary>
            <param name="contractName">契约名</param>
            <param name="trackID">跟踪码</param>
            <returns>连接地址</returns>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.WcfCallHelper.Instance">
            <summary>
            全局唯一调用
            </summary>
        </member>
        <member name="F:Better517na.Core.AsyncInfrastructure.Wcf.DuplexServiceRealProxy`2.logBus">
            <summary>
            日志组件业务对象............
            </summary>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.ServiceRouteDBData">
            <summary>
            服务路由数据库访问类
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ServiceRouteDBData.GetServiceRouteByContractAndUniqueSign(System.String,System.String,System.String,System.String,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            通过契约全名和唯一标识获取服务路由
            </summary>
            <param name="contractName">契约全名</param>
            <param name="machineNo">机器码</param>
            <param name="dataCenter">机房号</param>
            <param name="uniqueSign">唯一标识</param>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <returns>服务路由集合</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ServiceRouteDBData.GetDownTimeIPList(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            获取宕机表维护的IP集合 
            </summary>
            <param name="conn">连接</param>
            <param name="trans">事务</param>
            <returns>宕机IP 集合</returns>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.ExceptionDetailInfo">
            <summary>
            缓存用异常信息
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ExceptionDetailInfo.Route">
            <summary>
            异常的路由（这里的唯一标示等需要填具体的）
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ExceptionDetailInfo.CurrentTime">
            <summary>
            添加时间,用于筛选，当前时间2分钟之前的会被丢弃
            </summary>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.ExceptionDealThreadArg">
            <summary>
            异常处理线程参数
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ExceptionDealThreadArg.TrackId">
            <summary>
            跟踪码
            </summary>
        </member>
        <member name="P:Better517na.Core.AsyncInfrastructure.ExceptionDealThreadArg.Route">
            <summary>
            路由信息
            </summary>
        </member>
        <member name="T:Better517na.Core.AsyncInfrastructure.ConnectionFactory">
            <summary>
            连接对象创建类：创建指定KEY对应的数据库连接
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConnectionFactory.#cctor">
            <summary>
            构造函数：初始化读取配置文件
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConnectionFactory.GetConnection(System.String)">
            <summary>
            根据连接Key取得连接
            </summary>
            <param name="connectionKey">数据库连接配置KEY</param>
            <returns>数据库连接 IDbConnection</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConnectionFactory.GetProviderName(System.String)">
            <summary>
            取得配置中连接属性ProviderName
            </summary>
            <param name="connectionKey">数据库连接配置KEY</param>
            <returns>数据库连接属性ProviderName</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConnectionFactory.GetDesConnection(System.String)">
            <summary>
            返回解密后连接
            </summary>
            <param name="connectionStr">连接字符串</param>
            <returns>连接对象</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConnectionFactory.GetServiceRouteReadConnection">
            <summary>
            返回ServiceRoute读库连接
            </summary>
            <returns>连接对象</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConnectionFactory.GetServiceRouteWriteConnection">
            <summary>
            返回ServiceRoute写库连接
            </summary>
            <returns>连接对象</returns>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConnectionFactory.InitConnectionConfig">
            <summary>
            初始化数据库连接配置
            </summary>
        </member>
        <member name="M:Better517na.Core.AsyncInfrastructure.ConnectionFactory.Conn(System.String)">
            <summary>
            解密连接字符串，生成解密后的连接字符串
            </summary>
            <param name="conn">原始字符串 string</param>
            <returns>解密后的串 string</returns>
        </member>
    </members>
</doc>
